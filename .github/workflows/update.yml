# This is a basic workflow that is manually triggered

name: Update

# Controls when the action will run. Workflow runs when manually triggered using the UI
# or API.
on:
  workflow_dispatch:
    # Inputs the workflow accepts.
    inputs:
      old_branch:
        description: 'Old branch'
        required: true
        default: 'upstream/master'
      old_version:
        # Friendly description to be shown in the UI instead of 'name'
        description: 'Old version'
        # Input has to be provided for the workflow to run
        required: true
      patch_src:
        description: 'Patches version'
        required: false
      new_branch:
        description: 'New branch'
        required: false
      new_version:
        # Friendly description to be shown in the UI instead of 'name'
        description: 'New version'
        # Input has to be provided for the workflow to run
        required: true
      fix_getlevel:
        description: 'Fix getLevel issue'
        required: false
        type: boolean

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  update:

    runs-on: ubuntu-latest

    steps:
    - name: "Log arguments"
      run: |
        echo "Old branch: ${{ github.event.inputs.old_branch }}"
        echo "Old version: ${{ github.event.inputs.old_version }}"
        echo "Patches version: ${{ github.event.inputs.patch_src }}"
        echo "New branch: ${{ github.event.inputs.new_branch }}"
        echo "New version: ${{ github.event.inputs.new_version }}"
        echo "Fix getLevel issue: ${{ github.event.inputs.fix_getlevel}}"
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - run: |
        git remote add upstream https://github.com/MinecraftForge/MCPConfig
        git fetch upstream
        git checkout -b ${{ github.event.inputs.old_branch }} remotes/${{ github.event.inputs.old_branch }}
    - uses: actions/github-script@v6
      id: split_version
      env:
        OLD_VERSION: ${{ github.event.inputs.old_version }}
        NEW_VERSION: ${{ github.event.inputs.new_version }}
        PATCH_SRC_VERSION: ${{ github.event.inputs.patch_src }}
      with:
        script: |
          const oldVersion = process.env.OLD_VERSION.split("/");
          const newVersion = process.env.NEW_VERSION.split("/");
          var returnValue = {new_version_name: newVersion[newVersion.length - 1], old_version_name: oldVersion[oldVersion.length - 1], new_version_type: newVersion[0]}
          if (process.env.PATCH_SRC_VERSION) {
            var pathSrcVersion = process.env.PATCH_SRC_VERSION.split("/");
            returnValue.patch_src_version_name = pathSrcVersion[pathSrcVersion.length - 1]
          }
          return returnValue;
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
    - name: Set up JDK 18
      uses: actions/setup-java@v3
      with:
        java-version: '18'
        distribution: 'temurin'
    - id: get_versions
      run: |
        mkdir -p ~/.minecraft/versions/
        wget https://launchermeta.mojang.com/mc/game/version_manifest_v2.json -O ~/.minecraft/version_manifest_v2.json
    - uses: actions/github-script@v6
      env:
        OLD_VERSION: ${{ fromJson(steps.split_version.outputs.result).old_version_name }}
        NEW_VERSION: ${{ fromJson(steps.split_version.outputs.result).new_version_name }}
        PATCH_SRC_VERSION: ${{ fromJson(steps.split_version.outputs.result).patch_src_version_name }}
      with:
        script: |
          const os = require('os')
          const fs = require('fs')
          const versions = JSON.parse(fs.readFileSync(os.homedir() + '/.minecraft/version_manifest_v2.json', 'utf8')).versions
          for (var i = 0; i < versions.length; i++) {
            var version = versions[i]
            if (version.id == process.env.OLD_VERSION || version.id == process.env.NEW_VERSION || version.id == process.env.PATCH_SRC_VERSION) {
                var file = os.homedir() + '/.minecraft/versions/' + version.id + '/' + version.id
                io.mkdirP(os.homedir() + '/.minecraft/versions/' + version.id + '/')
                await exec.exec('wget ' + version.url + ' -O '  + file + '.json')
                var versionJson = JSON.parse(fs.readFileSync(file + '.json', 'utf8'))
                await exec.exec('wget ' + versionJson.downloads.client.url + ' -O ' + file + '.jar')
            }
          }
    - if: ${{ github.event.inputs.patch_src && github.event.inputs.patch_src != github.event.inputs.new_version }}
      uses: gradle/gradle-build-action@0d13054264b0bb894ded474f08ebb30921341cee
      with:
        arguments: update -Pold_version=${{ github.event.inputs.patch_src }} -Pnew_version=${{ github.event.inputs.new_version }}
    - if: ${{ github.event.inputs.patch_src }}
      run: cp versions/${{ github.event.inputs.new_version }}/joined.tsrg ../old_joined.tsrg
    - name: Build with Gradle
      uses: gradle/gradle-build-action@0d13054264b0bb894ded474f08ebb30921341cee
      with:
        arguments: update -Pold_version=${{ github.event.inputs.old_version }} -Pnew_version=${{ github.event.inputs.new_version }}
    - if: ${{ github.event.inputs.patch_src }}
      run: cp versions/${{ github.event.inputs.new_version }}/joined.tsrg ../new_joined.tsrg
    - if: ${{ github.event.inputs.patch_src != github.event.inputs.new_version }}
      run: |
        rm -rf versions/${{ github.event.inputs.new_version}}/patches
        cp -r versions/${{ github.event.inputs.patch_src || github.event.inputs.old_version }}/patches versions/${{ github.event.inputs.new_version}}/patches
    - if: ${{ github.event.inputs.patch_src }}
      run: |
        cd ..
        wget https://github.com/coehlrich/remap-patches/releases/download/1.0.6/remap-patches-all.jar
        java -jar remap-patches-all.jar old_joined.tsrg new_joined.tsrg MCPConfig/versions/${{ github.event.inputs.new_version }}/patches
        cd MCPConfig
    - if: ${{ github.event.inputs.fix_getlevel == 'true' }}
      run: sed -i 's/m_183503_/m_214157_/g' versions/${{ github.event.inputs.new_version }}/joined.tsrg
    - run: git add .
    - if: ${{ github.event.inputs.new_branch }}
      run: |
        git stash
        git checkout -B ${{ github.event.inputs.new_branch }} remotes/upstream/master
        git push -u origin ${{ github.event.inputs.new_branch }}
        rm -rf versions/${{ github.event.inputs.new_version }}
        git add .
        git stash apply
    - if: ${{ !github.event.inputs.new_branch }}
      run: git config push.default "upstream"
    - run: |
        git config --global user.name github-actions
        git config --global user.email 41898282+github-actions[bot]@users.noreply.github.com
        git add .
        git commit -m "Start ${{ github.event.inputs.new_version }}"
        git push
    - name: Apply and Create patches
      id: patches
      uses: gradle/gradle-build-action@0d13054264b0bb894ded474f08ebb30921341cee
      continue-on-error: true
      with:
        arguments: :${{ fromJson(steps.split_version.outputs.result).new_version_name }}:projectApplyAll :${{ fromJson(steps.split_version.outputs.result).new_version_name }}:projectMakeAll -Ptype=${{ fromJson(steps.split_version.outputs.result).new_version_type }}
    - if: ${{ steps.patches.outcome == 'success' }}
      name: Check if patches have changed
      id: check_changes
      continue-on-error: true
      run: |
        git add .
        git diff-index --quiet HEAD
    - if: ${{ steps.check_changes.outcome == 'failure' }}
      run: |
        git commit -m "Update patches"
        git push
    - name: Test jdks
      if: ${{ steps.patches.outcome == 'success' }}
      uses: gradle/gradle-build-action@0d13054264b0bb894ded474f08ebb30921341cee
      continue-on-error: true
      with:
        arguments: :${{ fromJson(steps.split_version.outputs.result).new_version_name }}:testJdks -Ptype=${{ fromJson(steps.split_version.outputs.result).new_version_type }}
