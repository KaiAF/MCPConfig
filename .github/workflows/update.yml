# This is a basic workflow that is manually triggered

name: Update
run-name: Update to ${{ inputs.new_version }} from ${{ inputs.old_version }}

# Controls when the action will run. Workflow runs when manually triggered using the UI
# or API.
on:
  workflow_dispatch:
    # Inputs the workflow accepts.
    inputs:
      old_branch:
        description: 'Old branch'
        required: true
        default: 'upstream/master'
      old_version:
        # Friendly description to be shown in the UI instead of 'name'
        description: 'Old version'
        # Input has to be provided for the workflow to run
        required: true
      patch_src:
        description: 'Patches version'
        required: false
      new_branch:
        description: 'New branch'
        required: false
      new_version:
        # Friendly description to be shown in the UI instead of 'name'
        description: 'New version'
        # Input has to be provided for the workflow to run
        required: true
      fix-mapping-error:
        description: 'Fix known error(s) in mapping file'
        required: false
        default: true
        type: boolean

jobs:
  update:

    name: Update
    runs-on: ubuntu-latest
    outputs:
      old_version_type: ${{ fromJson(steps.split_version.outputs.result).old_version_type }}
      old_version_name: ${{ fromJson(steps.split_version.outputs.result).old_version_name }}
      new_version_type: ${{ fromJson(steps.split_version.outputs.result).new_version_type }}
      new_version_name: ${{ fromJson(steps.split_version.outputs.result).new_version_name }}
      old_branch_name: ${{ fromJson(steps.split_version.outputs.result).old_branch }}
    steps:
    - name: "Log arguments"
      run: |
        echo "Old branch: ${{ github.event.inputs.old_branch }}"
        echo "Old version: ${{ github.event.inputs.old_version }}"
        echo "Patches version: ${{ github.event.inputs.patch_src }}"
        echo "New branch: ${{ github.event.inputs.new_branch }}"
        echo "New version: ${{ github.event.inputs.new_version }}"
    - uses: actions/github-script@v6
      name: Check arguments
      env:
        OLD_BRANCH: ${{ github.event.inputs.old_branch }}
        OLD_VERSION: ${{ github.event.inputs.old_version }}
        PATCHES_VERSION: ${{ github.event.inputs.patch_src }}
        NEW_BRANCH: ${{ github.event.inputs.new_branch }}
        NEW_VERSION: ${{ github.event.inputs.new_version }}
      with:
        script: |
          const oldBranch = process.env.OLD_BRANCH;
          const oldVersion = process.env.OLD_VERSION;
          const patchesVersion = process.env.PATCHES_VERSION;
          const newBranch = process.env.NEW_BRANCH;
          const newVersion = process.env.NEW_VERSION;
          
          const versionRegex = /^(release|(snapshot|pre)\/[^/]+)\/[^/]+$/;
          var failed = 0
          if (!/^(upstream|origin)\/.+/.test(oldBranch)) {
            core.error("Old branch needs to be set to an existing branch on either `MinecraftForge/MCPConfig` or `coehlrich/MCPConfig` in the format of `<repo>/<branch>` where repo is either `upstream` or `origin`")
            failed++;
          }
          
          if (!versionRegex.test(oldVersion)) {
            core.error("Old version needs to be set to a version that is on the old branch and needs to be in the format of either `release/<version>`, `pre/<target>/<version>`, or `snapshot/<target>/<version>`")
            failed++;
          }
          
          if (patchesVersion == oldVersion) {
            core.error("Patches version inputted as the same as the old version only the oldVersion is needed")
            failed++;
          }
          
          if (patchesVersion != "" && !versionRegex.test(patchesVersion)) {
            core.error("Patches version either needs to be kept empty or needs to be set to a version that is on the old branch and needs to be in the format of either `release/<version>`, `pre/<target>/<version>`, or `snapshot/<target>/<version>`")
            failed++;
          }
          
          if (oldBranch.startsWith("upstream/") && newBranch == "") {
            core.error("if the old branch is set to an upstream branch then the new branch needs to be set since this workflow cannot push to upstream")
            failed++;
          }
          
          if (!versionRegex.test(newVersion)) {
            core.error("New version needs to be a version that doesn't exist on the new branch and needs to be in the format of either `release/<version>`, `pre/<target>/<version>`, or `snapshot/<target>/<version>`")
            failed++;
          }
          
          if (failed > 0) {
            core.setFailed(failed + " errors detected in arguments. Check logs for more details")
          }
    - name: Download maven-metadata.xml
      run: wget ${{ vars.SRGUTILS_BASE_URL }}/maven-metadata.xml
    - name: Get latest version of srgutils
      id: srgutils_version
      uses: mavrosxristoforos/get-xml-info@1.1.1
      with:
        xml-file: maven-metadata.xml
        xpath: //metadata/versioning/latest
    - name: Remove maven-metadata.xml
      run: rm maven-metadata.xml
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - uses: actions/github-script@v6
      id: split_version
      env:
        OLD_VERSION: ${{ github.event.inputs.old_version }}
        NEW_VERSION: ${{ github.event.inputs.new_version }}
        PATCH_SRC_VERSION: ${{ github.event.inputs.patch_src }}
        OLD_BRANCH: ${{ github.event.inputs.old_branch }}
      with:
        script: |
          const oldVersion = process.env.OLD_VERSION.split("/");
          const newVersion = process.env.NEW_VERSION.split("/");
          var returnValue = {old_version_type: oldVersion[0], old_version_name: oldVersion[oldVersion.length - 1], new_version_type: newVersion[0], new_version_name: newVersion[newVersion.length - 1], old_branch: process.env.OLD_BRANCH.replace(/^[^/]+\//, '')}
          if (process.env.PATCH_SRC_VERSION) {
            var pathSrcVersion = process.env.PATCH_SRC_VERSION.split("/");
            returnValue.patch_src_version_name = pathSrcVersion[pathSrcVersion.length - 1]
          }
          return returnValue;
    - uses: actions/cache/restore@v3
      name: Restore BuildSrc cache
      with:
        path: |
          buildSrc/build/**
          buildSrc/.gradle/**
        key: buildsrc-build-jdk${{ vars.JAVA_VERSION }}-
    - uses: actions/cache/restore@v3
      name: Restore Other cache
      with:
        path: |
          build/download-task/**
          .gradle/**
        key: gradle-other-
    - run: |
        git remote add upstream https://github.com/MinecraftForge/MCPConfig
        git fetch upstream
        git checkout -B ${{ fromJson(steps.split_version.outputs.result).old_branch }} remotes/${{ github.event.inputs.old_branch }}
    - name: Set up JDK ${{ vars.JAVA_VERSION }}
      uses: actions/setup-java@v3
      with:
        java-version: '${{ vars.JAVA_VERSION }}'
        distribution: 'temurin'
    - id: get_versions
      run: |
        mkdir -p ~/.minecraft/versions/
        wget https://piston-meta.mojang.com/mc/game/version_manifest_v2.json -O ~/.minecraft/version_manifest_v2.json
    - uses: actions/github-script@v6
      env:
        OLD_VERSION: ${{ fromJson(steps.split_version.outputs.result).old_version_name }}
        NEW_VERSION: ${{ fromJson(steps.split_version.outputs.result).new_version_name }}
        PATCH_SRC_VERSION: ${{ fromJson(steps.split_version.outputs.result).patch_src_version_name }}
      with:
        script: |
          const os = require('os')
          const fs = require('fs')
          const versions = JSON.parse(fs.readFileSync(os.homedir() + '/.minecraft/version_manifest_v2.json', 'utf8')).versions
          for (var i = 0; i < versions.length; i++) {
            var version = versions[i]
            if (version.id == process.env.OLD_VERSION || version.id == process.env.NEW_VERSION || version.id == process.env.PATCH_SRC_VERSION) {
                var file = os.homedir() + '/.minecraft/versions/' + version.id + '/' + version.id
                io.mkdirP(os.homedir() + '/.minecraft/versions/' + version.id + '/')
                await exec.exec('wget ' + version.url + ' -O '  + file + '.json')
                var versionJson = JSON.parse(fs.readFileSync(file + '.json', 'utf8'))
                await exec.exec('wget ' + versionJson.downloads.client.url + ' -O ' + file + '.jar')
            }
          }
    - name: Update SrgUtils
      uses: mingjun97/file-regex-replace@v1
      with:
        regex: "SRGUTILS_VERSION = '\\d+\\.\\d+\\.\\d+'"
        replacement: "SRGUTILS_VERSION = '${{ steps.srgutils_version.outputs.info }}'"
        include: ^build\.gradle
    - name: Upload build.gradle
      uses: actions/upload-artifact@v3
      with:
        name: build.gradle
        path: build.gradle
    - if: ${{ github.event.inputs.patch_src && github.event.inputs.patch_src != github.event.inputs.new_version }}
      uses: gradle/gradle-build-action@v2
      with:
        arguments: update -Pold_version=${{ github.event.inputs.patch_src }} -Pnew_version=${{ github.event.inputs.new_version }}
        generate-job-summary: false
    - if: ${{ github.event.inputs.patch_src }}
      run: cp versions/${{ github.event.inputs.new_version }}/joined.tsrg ../old_joined.tsrg
    - name: Build with Gradle
      uses: gradle/gradle-build-action@v2
      with:
        arguments: update -Pold_version=${{ github.event.inputs.old_version }} -Pnew_version=${{ github.event.inputs.new_version }}
        generate-job-summary: false
    - name: Write summary for update
      run: |
        cat versions/${{ github.event.inputs.new_version }}/statistics.md >> $GITHUB_STEP_SUMMARY
        rm -f versions/${{ github.event.inputs.new_version }}/statistics.md
    - if: ${{ github.event.inputs.patch_src }}
      run: cp versions/${{ github.event.inputs.new_version }}/joined.tsrg ../new_joined.tsrg
    - if: ${{ github.event.inputs.patch_src != github.event.inputs.new_version }}
      run: |
        rm -rf versions/${{ github.event.inputs.new_version}}/patches
        cp -r versions/${{ github.event.inputs.patch_src || github.event.inputs.old_version }}/patches versions/${{ github.event.inputs.new_version}}/patches
    - if: ${{ github.event.inputs.patch_src }}
      run: |
        cd ..
        wget https://github.com/coehlrich/remap-patches/releases/download/1.0.6/remap-patches-all.jar
        java -jar remap-patches-all.jar old_joined.tsrg new_joined.tsrg MCPConfig/versions/${{ github.event.inputs.new_version }}/patches
        cd MCPConfig
    - run: git add .
    - name: Store other updated files
      if: ${{ github.event.inputs.new_branch }}
      run: |
        mkdir ../tmp
        for ITEM in buildSrc gradle templates .gitattributes .gitignore LICENSE Mojang.md README.md build.gradle gradlew gradlew.bat settings.gradle update.gradle
        do
          echo "Copying $ITEM"
          cp -rv ./$ITEM ../tmp/$ITEM
        done
    - if: ${{ github.event.inputs.new_branch }}
      run: |
        git stash
        git checkout ${{ github.event.inputs.new_branch }} || git checkout -B ${{ github.event.inputs.new_branch }} remotes/upstream/master
        git push -u origin ${{ github.event.inputs.new_branch }}
        rm -rf versions/${{ github.event.inputs.new_version }}
        git add .
        git stash apply
    - name: Restore other updated files
      if: ${{ github.event.inputs.new_branch }}
      run: |
        cp -rvT ../tmp .
        git add .
    - run: |
        git config --global user.name github-actions
        git config --global user.email 41898282+github-actions[bot]@users.noreply.github.com
        git commit -m "Start ${{ github.event.inputs.new_version }}"
        git push
    - uses: actions/cache/save@v3
      name: Save BuildSrc cache
      with:
        path: |
          buildSrc/build/**
          buildSrc/.gradle/**
        key: buildsrc-build-jdk${{ vars.JAVA_VERSION }}-${{ hashFiles('buildSrc/build/**', 'buildSrc/.gradle/**')}}
    - uses: actions/cache/save@v3
      name: Save Other cache
      with:
        path: |
          build/download-task/**
          .gradle/**
        key: gradle-other-${{ hashFiles('build/download-task/**', '.gradle/**')}}

  get-diff:
    needs: update
    name: Get diff
    uses: ./.github/workflows/get-diff.yml
    with:
      old_branch: ${{ inputs.old_branch }}
      old_version: ${{ inputs.old_version }}
      new_branch: ${{ inputs.new_branch }}
      new_version: ${{ inputs.new_version }}

  finish:
    needs: update
    uses: ./.github/workflows/common.yml
    with:
      branch: ${{ github.event.inputs.new_branch || needs.update.outputs.old_branch_name }}
      version: ${{ github.event.inputs.new_version }}
