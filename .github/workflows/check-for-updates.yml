name: Check For New Snapshots
on: 
  schedule:
    - cron: "*/30 6-19 * * *"
  workflow_dispatch:
permissions:
  actions: write
  
jobs:
  check:
    env:
      LATEST_VERSION: ${{ vars.LATEST_MC_VERSION }}
      LATEST_MAINLINE: ${{ vars.LATEST_MAINLINE_VERSION }}
      TARGET_VERSION: ${{ vars.TARGET_MC_VERSION }}
    runs-on: ubuntu-latest
    if: ${{ vars.LATEST_MC_VERSION != vars.TARGET_MC_VERSION }}
    steps:
      - name: Get Version Manifest
        id: version_manifest
        uses: fjogeleit/http-request-action@v1
        with:
          url: "https://piston-meta.mojang.com/mc/game/version_manifest_v2.json"
          method: "GET"
      - name: Store Latest Version
        uses: octokit/request-action@v2.1.7
        with:
          route: PATCH /repos/{owner}/{repo}/actions/variables/{name}
          owner: coehlrich
          repo: MCPConfig
          name: LATEST_MC_VERSION
          value: ${{ fromJson(steps.version_manifest.outputs.response).latest.snapshot }}
        env:
          GITHUB_TOKEN: ${{ secrets.VARIABLES_TOKEN }}
      - name: Check latest snapshot
        id: check
        uses: actions/github-script@v6
        env:
          NEW_LATEST_VERSION: ${{ fromJson(steps.version_manifest.outputs.response).latest.snapshot }}
          LATEST_RELEASE: ${{ fromJson(steps.version_manifest.outputs.response).latest.release }}
        with:
          script: |
            function getInfo(name) {
              var type = "";
              var april = false;
              if (/^\d+\.\d+(\.\d+)?$/.test(name)) {
                type = "release";
              } else if (/^\d{2}w\d{2}[a-z]$/.test(name)) {
                type = "snapshot";
              } else if (/^\d+\.\d+.\d+-pre\d+$/.test(name) || /^\d+\.\d+.\d+-rc\d+$/.test(name)) {
                type = "pre";
              } else {
                // If it doesn't match anything guess that it's an april fools release
                type = "snapshot";
                april = true;
              }
              return {type: type, april: april, version: name}
            }
            
            function getVersionPrefix(info) {
              if (info.type === "snapshot" || info.type === "pre") {
                if (info.april) {
                  return "snapshot/april/";
                } else {
                  const targetSplit = process.env.TARGET_VERSION.split(".");
                  return info.type + "/" + targetSplit[0] + "." + targetSplit[1] + "/";
                }
              } else {
                return info.type + "/";
              }
            }
            
            function getBranch(release, newVersion) {
              if (release && newVersion) {
                return process.env.TARGET_VERSION + "-release";
              } else if (release && !newVersion) {
                return "upstream/master";
              } else {
                return (newVersion ? "" : "origin/") + process.env.TARGET_VERSION;
              }
            }
            
            const latestSnapshot = process.env.NEW_LATEST_VERSION
            
            const newVersionInfo = getInfo(latestSnapshot);
            const oldVersion = newVersionInfo.april ? process.env.LATEST_RELEASE : process.env.LATEST_MAINLINE;
            const oldVersionInfo = getInfo(oldVersion);
            
            if (process.env.LATEST_VERSION === latestSnapshot) {
              core.info("No new snapshots have been released since " + process.env.LATEST_VERSION)
              return {old_version: oldVersionInfo, new_version: newVersionInfo, is_new: false};
            }
            core.info("Found new snapshot: " + latestSnapshot)
            
            if (!newVersionInfo.april) {
              github.rest.
            }
            
            var inputs = {}
            inputs.old_version = getVersionPrefix(oldVersionInfo) + oldVersion;
            inputs.new_version = getVersionPrefix(newVersionInfo) + latestSnapshot;
            
            inputs.old_branch = getBranch(oldVersionInfo.type === "release", false);
            var newBranch = getBranch(newVersionInfo.type === "release", true);
            if (inputs.old_branch.split("/")[1] !== newBranch) {
              inputs.new_branch = newBranch;
            }
            
            core.info("Using inputs:");
            for (const key in inputs) {
              core.info(key + ": " + inputs[key]);
            }
            
            /*github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: "update.yml",
              ref: "master",
              inputs: inputs
            });*/
            
            return {old_version: oldVersionInfo, new_version: newVersionInfo, is_new: true};
      - name: Store Latest Version
        if: ${{ fromJson(steps.check.outputs.result).is_new && !fromJson(steps.check.outputs.result).new_version.april }}
        uses: octokit/request-action@v2.1.7
        with:
          route: PATCH /repos/{owner}/{repo}/actions/variables/{name}
          owner: coehlrich
          repo: MCPConfig
          name: LATEST_MAINLINE_VERSION
          value: ${{ fromJson(steps.version_manifest.outputs.response).new_version.version }}
        env:
          GITHUB_TOKEN: ${{ secrets.VARIABLES_TOKEN }}
